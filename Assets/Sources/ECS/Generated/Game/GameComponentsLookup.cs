//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentLookupGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public static class GameComponentsLookup {

    public const int Agent = 0;
    public const int Ammo = 1;
    public const int AnyHealthListener = 2;
    public const int Asset = 3;
    public const int Attacking = 4;
    public const int AttackingListener = 5;
    public const int AttackTarget = 6;
    public const int Character = 7;
    public const int Collided = 8;
    public const int CollidedTrigger = 9;
    public const int CollidedWith = 10;
    public const int CollisionContactPoint = 11;
    public const int CollisionEvent = 12;
    public const int CollisionId = 13;
    public const int CollisionTriggerId = 14;
    public const int CurrentWeapon = 15;
    public const int Damage = 16;
    public const int DamageReceived = 17;
    public const int DamageReceivedFromAttacker = 18;
    public const int DamageReceivedFromAttackerListener = 19;
    public const int DamageReceivedListener = 20;
    public const int Dead = 21;
    public const int DeadListener = 22;
    public const int Destructed = 23;
    public const int Direction = 24;
    public const int Duration = 25;
    public const int DurationLeft = 26;
    public const int DurationUp = 27;
    public const int Enemy = 28;
    public const int EntityBehaviour = 29;
    public const int FireRate = 30;
    public const int Health = 31;
    public const int HealthListener = 32;
    public const int Id = 33;
    public const int Layer = 34;
    public const int Lifetime = 35;
    public const int MaxAmmo = 36;
    public const int MaxHealth = 37;
    public const int MovementSpeed = 38;
    public const int NodeStatus = 39;
    public const int OwnerId = 40;
    public const int Player = 41;
    public const int Poolable = 42;
    public const int Pooled = 43;
    public const int PooledListener = 44;
    public const int Projectile = 45;
    public const int Reloaded = 46;
    public const int ReloadedListener = 47;
    public const int Reloading = 48;
    public const int ReloadingCooldown = 49;
    public const int ReloadingEntity = 50;
    public const int ReloadingListener = 51;
    public const int Rigidbody = 52;
    public const int SentToPool = 53;
    public const int ShootingCooldown = 54;
    public const int ShootingPoint = 55;
    public const int Shot = 56;
    public const int ShotListener = 57;
    public const int TargetId = 58;
    public const int Team = 59;
    public const int Transform = 60;
    public const int WeaponAdded = 61;
    public const int WeaponAddedListener = 62;
    public const int Weapon = 63;

    public const int TotalComponents = 64;

    public static readonly string[] componentNames = {
        "Agent",
        "Ammo",
        "AnyHealthListener",
        "Asset",
        "Attacking",
        "AttackingListener",
        "AttackTarget",
        "Character",
        "Collided",
        "CollidedTrigger",
        "CollidedWith",
        "CollisionContactPoint",
        "CollisionEvent",
        "CollisionId",
        "CollisionTriggerId",
        "CurrentWeapon",
        "Damage",
        "DamageReceived",
        "DamageReceivedFromAttacker",
        "DamageReceivedFromAttackerListener",
        "DamageReceivedListener",
        "Dead",
        "DeadListener",
        "Destructed",
        "Direction",
        "Duration",
        "DurationLeft",
        "DurationUp",
        "Enemy",
        "EntityBehaviour",
        "FireRate",
        "Health",
        "HealthListener",
        "Id",
        "Layer",
        "Lifetime",
        "MaxAmmo",
        "MaxHealth",
        "MovementSpeed",
        "NodeStatus",
        "OwnerId",
        "Player",
        "Poolable",
        "Pooled",
        "PooledListener",
        "Projectile",
        "Reloaded",
        "ReloadedListener",
        "Reloading",
        "ReloadingCooldown",
        "ReloadingEntity",
        "ReloadingListener",
        "Rigidbody",
        "SentToPool",
        "ShootingCooldown",
        "ShootingPoint",
        "Shot",
        "ShotListener",
        "TargetId",
        "Team",
        "Transform",
        "WeaponAdded",
        "WeaponAddedListener",
        "Weapon"
    };

    public static readonly System.Type[] componentTypes = {
        typeof(Agent),
        typeof(Ammo),
        typeof(AnyHealthListenerComponent),
        typeof(AssetComponent),
        typeof(Attacking),
        typeof(AttackingListenerComponent),
        typeof(AttackTarget),
        typeof(CharacterComponent),
        typeof(CollidedComponent),
        typeof(CollidedTriggerComponent),
        typeof(CollidedWithComponent),
        typeof(CollisionContactPointComponent),
        typeof(CollisionEvent),
        typeof(CollisionIdComponent),
        typeof(CollisionTriggerIdComponent),
        typeof(CurrentWeapon),
        typeof(Damage),
        typeof(DamageReceived),
        typeof(DamageReceivedFromAttacker),
        typeof(DamageReceivedFromAttackerListenerComponent),
        typeof(DamageReceivedListenerComponent),
        typeof(Dead),
        typeof(DeadListenerComponent),
        typeof(Destructed),
        typeof(Direction),
        typeof(Duration),
        typeof(DurationLeft),
        typeof(DurationUp),
        typeof(Enemy),
        typeof(EntityBehaviourComponent),
        typeof(FireRate),
        typeof(Health),
        typeof(HealthListenerComponent),
        typeof(Id),
        typeof(Layer),
        typeof(Lifetime),
        typeof(MaxAmmo),
        typeof(MaxHealth),
        typeof(MovementSpeed),
        typeof(NodeStatus),
        typeof(OwnerId),
        typeof(PlayerComponent),
        typeof(Poolable),
        typeof(Pooled),
        typeof(PooledListenerComponent),
        typeof(Projectile),
        typeof(Reloaded),
        typeof(ReloadedListenerComponent),
        typeof(Reloading),
        typeof(ReloadingCooldown),
        typeof(ReloadingEntity),
        typeof(ReloadingListenerComponent),
        typeof(Rigidbody),
        typeof(SentToPool),
        typeof(ShootingCooldown),
        typeof(ShootingPoint),
        typeof(Shot),
        typeof(ShotListenerComponent),
        typeof(TargetId),
        typeof(Team),
        typeof(TransformComponent),
        typeof(WeaponAdded),
        typeof(WeaponAddedListenerComponent),
        typeof(WeaponComponent)
    };
}
