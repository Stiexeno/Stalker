//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public DamageReceivedFromAttackerListenerComponent damageReceivedFromAttackerListener { get { return (DamageReceivedFromAttackerListenerComponent)GetComponent(GameComponentsLookup.DamageReceivedFromAttackerListener); } }
    public bool hasDamageReceivedFromAttackerListener { get { return HasComponent(GameComponentsLookup.DamageReceivedFromAttackerListener); } }

    public void AddDamageReceivedFromAttackerListener(System.Collections.Generic.List<IDamageReceivedFromAttackerListener> newValue) {
        var index = GameComponentsLookup.DamageReceivedFromAttackerListener;
        var component = (DamageReceivedFromAttackerListenerComponent)CreateComponent(index, typeof(DamageReceivedFromAttackerListenerComponent));
        component.value = newValue;
        AddComponent(index, component);
    }

    public void ReplaceDamageReceivedFromAttackerListener(System.Collections.Generic.List<IDamageReceivedFromAttackerListener> newValue) {
        var index = GameComponentsLookup.DamageReceivedFromAttackerListener;
        var component = (DamageReceivedFromAttackerListenerComponent)CreateComponent(index, typeof(DamageReceivedFromAttackerListenerComponent));
        component.value = newValue;
        ReplaceComponent(index, component);
    }

    public void RemoveDamageReceivedFromAttackerListener() {
        RemoveComponent(GameComponentsLookup.DamageReceivedFromAttackerListener);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherDamageReceivedFromAttackerListener;

    public static Entitas.IMatcher<GameEntity> DamageReceivedFromAttackerListener {
        get {
            if (_matcherDamageReceivedFromAttackerListener == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.DamageReceivedFromAttackerListener);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherDamageReceivedFromAttackerListener = matcher;
            }

            return _matcherDamageReceivedFromAttackerListener;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.EventEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public void AddDamageReceivedFromAttackerListener(IDamageReceivedFromAttackerListener value) {
        var listeners = hasDamageReceivedFromAttackerListener
            ? damageReceivedFromAttackerListener.value
            : new System.Collections.Generic.List<IDamageReceivedFromAttackerListener>();
        listeners.Add(value);
        ReplaceDamageReceivedFromAttackerListener(listeners);
    }

    public void RemoveDamageReceivedFromAttackerListener(IDamageReceivedFromAttackerListener value, bool removeComponentWhenEmpty = true) {
        var listeners = damageReceivedFromAttackerListener.value;
        listeners.Remove(value);
        if (removeComponentWhenEmpty && listeners.Count == 0) {
            RemoveDamageReceivedFromAttackerListener();
        } else {
            ReplaceDamageReceivedFromAttackerListener(listeners);
        }
    }
}
